name: Flutter Integration Tests (Headless)

on:
  push:
    branches: [ main, master ]
  pull_request:

concurrency:
  group: integration-${{ github.ref }}
  cancel-in-progress: true

jobs:
  android-integration:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Flutter pub get
        run: flutter pub get

      - name: Run integration tests on headless emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30                 # lighter + reliable under SW rendering
          target: default               # avoid google_apis for speed/stability
          arch: x86_64
          profile: pixel_4
          force-avd-creation: true
          disable-linux-hw-accel: true  # action will add -accel off; don't duplicate
          emulator-boot-timeout: 1200   # <-- correct key
          emulator-options: >-
            -no-snapshot
            -no-snapshot-save
            -no-boot-anim
            -noaudio
            -gpu swiftshader_indirect
            -no-window
            -no-metrics
          disable-animations: true
          pre-emulator-launch-script: |
            # Keep adb healthy before launch
            adb kill-server || true
            adb start-server
          script: |
            set -euxo pipefail

            # Wait for the emulator device to appear
            adb wait-for-device

            # If it's "offline", bounce adb once
            if adb devices | grep -q "offline"; then
              adb kill-server || true
              adb start-server
              adb wait-for-device
            fi

            # Hard wait until sys.boot_completed == 1
            for i in $(seq 1 120); do
              booted=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
              [ "$booted" = "1" ] && echo "Emulator booted" && break
              echo "Waiting for boot... ($i/120)"; sleep 5
            done

            # QoL tuning: kill animations; unlock screen
            adb shell settings put global window_animation_scale 0
            adb shell settings put global transition_animation_scale 0
            adb shell settings put global animator_duration_scale 0
            adb shell input keyevent 82 || true

            flutter doctor -v
            # Warm Gradle/artifacts (optional but speeds up tests)
            flutter build apk --debug

            # Run all integration tests in integration_test/
            flutter devices
            flutter test integration_test/app_test.dart

            # Clean teardown to avoid flaky shutdown
            adb emu kill || true
