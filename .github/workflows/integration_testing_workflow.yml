name: Flutter Integration Tests (Headless)

on:
  push:
    branches: [ main, master ]

jobs:
  android-integration:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
            distribution: temurin
            java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Cache Gradle Dependencies
        # Saves time on subsequent runs by caching downloaded Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Flutter pub get
        run: flutter pub get

      - name: Run Integration Tests on Headless Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          # Use a high API level for better performance on CI
          api-level: 30
          target: default
          arch: x86_64
          profile: pixel_4
          # Force creation ensures a clean start
          force-avd-creation: true 
          # Disables hardware acceleration on Linux (required for GitHub Actions VMs)
          disable-linux-hw-accel: true 
          # Timeout for the emulator to boot up
          emulator-boot-timeout: 300 
          # Recommended options for headless environments
          emulator-options: >-
            -no-snapshot
            -no-snapshot-save
            -no-boot-anim
            -no-audio
            -no-window
            -gpu swiftshader_indirect
          disable-animations: true
      
          # The main script to execute commands on the running emulator
          script: |
            set -euxo pipefail
        
            # 1. Wait for device to fully come online
            adb wait-for-device
        
            # Optional: Unlock screen and ensure boot completion (critical for headless)
            adb shell input keyevent 82 || true
            adb shell settings put global window_animation_scale 0
            adb shell settings put global transition_animation_scale 0
            adb shell settings put global animator_duration_scale 0

            # 2. Show status
            flutter doctor -v
            flutter devices

            # 3. Execute the integration test.
            # 'flutter test' automatically builds and installs the necessary test APK on the device.
            flutter test integration_test/app_test.dart
        
            # 4. Clean up
            adb emu kill || true
